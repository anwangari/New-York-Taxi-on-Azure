{
	"name": "nytaxi-ADLS Gen2-to-lakehouse",
	"properties": {
		"activities": [
			{
				"name": "create data source and file format",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "SynapseDedicatedSQLPoolLinkedService",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "-- Check if the external file format exists and create it if not\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat')\n    CREATE EXTERNAL FILE FORMAT [SynapseParquetFormat]\n    WITH (FORMAT_TYPE = PARQUET);\n\n-- Check if the external data source exists and create it if not\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'new-york-taxi_nytaxidatastore2_dfs_core_windows_net')\n    CREATE EXTERNAL DATA SOURCE [new-york-taxi_nytaxidatastore2_dfs_core_windows_net]\n    WITH (\n        LOCATION = 'abfss://new-york-taxi@nytaxidatastore2.dfs.core.windows.net'\n    )"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Green Trips staging",
				"description": "External table referencing green trips in Data Lake",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "create data source and file format",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "SynapseDedicatedSQLPoolLinkedService",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "IF NOT EXISTS (SELECT 1 \n               FROM sys.external_tables \n               WHERE name = 'green_taxi_data_staged')\nBEGIN\n    CREATE EXTERNAL TABLE dbo.green_taxi_data_staged (\n        VendorID INT,\n        lpep_pickup_datetime DATETIME,\n        lpep_dropoff_datetime DATETIME,\n        passenger_count INT,\n        trip_distance FLOAT,\n        RatecodeID INT,\n        store_and_fwd_flag CHAR(1),\n        PULocationID INT,\n        DOLocationID INT,\n        payment_type INT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        congestion_surcharge FLOAT\n    )\n    WITH (\n        LOCATION = 'rides/green',\n        DATA_SOURCE = [new-york-taxi_nytaxidatastore2_dfs_core_windows_net],\n        FILE_FORMAT = SynapseParquetFormat\n    );\nEND;"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Yellow Trips staging",
				"description": "External table referencing yellow trips in Data Lake",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "create data source and file format",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "SynapseDedicatedSQLPoolLinkedService",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "IF NOT EXISTS (SELECT * FROM sys.external_tables WHERE name = 'yellow_taxi_data_staged' AND schema_id = SCHEMA_ID('dbo'))\n    CREATE EXTERNAL TABLE dbo.yellow_taxi_data_staged (\n        VendorID INT,\n        tpep_pickup_datetime DATETIME,\n        tpep_dropoff_datetime DATETIME,\n        passenger_count INT,\n        trip_distance FLOAT,\n        RatecodeID INT,\n        store_and_fwd_flag CHAR(1),\n        PULocationID INT,\n        DOLocationID INT,\n        payment_type INT,\n        fare_amount FLOAT,\n        extra FLOAT,\n        mta_tax FLOAT,\n        tip_amount FLOAT,\n        tolls_amount FLOAT,\n        improvement_surcharge FLOAT,\n        total_amount FLOAT,\n        congestion_surcharge FLOAT\n    )\n    WITH (\n        LOCATION = 'rides/yellow',\n        DATA_SOURCE = [new-york-taxi_nytaxidatastore2_dfs_core_windows_net],\n        FILE_FORMAT = SynapseParquetFormat\n    )"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Taxi Zones staging",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "create data source and file format",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "SynapseDedicatedSQLPoolLinkedService",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "IF NOT EXISTS (SELECT * FROM sys.external_tables WHERE name = 'zones_staging' AND schema_id = SCHEMA_ID('dbo'))\r\n    CREATE EXTERNAL TABLE dbo.zones_staging (\r\n        [locationid] bigint,\r\n        [borough] nvarchar(4000),\r\n        [zone] nvarchar(4000),\r\n        [service_zone] nvarchar(4000)\r\n    )\r\n    WITH (\r\n        LOCATION = 'rides/zone_lookups/taxi_zone_lookup.parquet',\r\n        DATA_SOURCE = [new-york-taxi_nytaxidatastore2_dfs_core_windows_net],\r\n        FILE_FORMAT = [SynapseParquetFormat]\r\n    )\r\n"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Cleaning green trips",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Green Trips staging",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "SynapseDedicatedSQLPoolLinkedService",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'green_taxi_data_CLEAN' AND schema_id = SCHEMA_ID('dbo'))\r\nCREATE TABLE dbo.green_taxi_data_CLEAN\r\nWITH\r\n(\r\n    DISTRIBUTION = ROUND_ROBIN,\r\n    CLUSTERED COLUMNSTORE INDEX\r\n)\r\nAS\r\nSELECT \r\n    CAST(CASE WHEN [VendorID] = 'NaN' THEN NULL ELSE [VendorID] END AS BIGINT) AS VendorID,\r\n    CAST([lpep_pickup_datetime] AS DATETIME2) AS lpep_pickup_datetime,\r\n    CAST([lpep_dropoff_datetime] AS DATETIME2) AS lpep_dropoff_datetime,\r\n    CAST([store_and_fwd_flag] AS VARCHAR(1)) AS store_and_fwd_flag,\r\n    CAST(CASE WHEN [RatecodeID] = 'NaN' THEN NULL ELSE [RatecodeID] END AS FLOAT) AS RatecodeID,\r\n    CAST(CASE WHEN [PULocationID] = 'NaN' THEN NULL ELSE [PULocationID] END AS BIGINT) AS PULocationID,\r\n    CAST(CASE WHEN [DOLocationID] = 'NaN' THEN NULL ELSE [DOLocationID] END AS BIGINT) AS DOLocationID,\r\n    CAST(CASE WHEN [passenger_count] = 'NaN' THEN NULL ELSE [passenger_count] END AS FLOAT) AS passenger_count,\r\n    CAST(CASE WHEN [trip_distance] = 'NaN' THEN NULL ELSE [trip_distance] END AS FLOAT) AS trip_distance,\r\n    CAST(CASE WHEN [fare_amount] = 'NaN' THEN NULL ELSE [fare_amount] END AS FLOAT) AS fare_amount,\r\n    CAST(CASE WHEN [extra] = 'NaN' THEN NULL ELSE [extra] END AS FLOAT) AS extra,\r\n    CAST(CASE WHEN [mta_tax] = 'NaN' THEN NULL ELSE [mta_tax] END AS FLOAT) AS mta_tax,\r\n    CAST(CASE WHEN [tip_amount] = 'NaN' THEN NULL ELSE [tip_amount] END AS FLOAT) AS tip_amount,\r\n    CAST(CASE WHEN [tolls_amount] = 'NaN' THEN NULL ELSE [tolls_amount] END AS FLOAT) AS tolls_amount,\r\n    CAST(CASE WHEN [ehail_fee] = 'NaN' THEN NULL ELSE [ehail_fee] END AS FLOAT) AS ehail_fee,\r\n    CAST(CASE WHEN [improvement_surcharge] = 'NaN' THEN NULL ELSE [improvement_surcharge] END AS FLOAT) AS improvement_surcharge,\r\n    CAST(CASE WHEN [total_amount] = 'NaN' THEN NULL ELSE [total_amount] END AS FLOAT) AS total_amount,\r\n    CAST(CASE WHEN [payment_type] = 'NaN' THEN NULL ELSE [payment_type] END AS FLOAT) AS payment_type,\r\n    CAST(CASE WHEN [trip_type] = 'NaN' THEN NULL ELSE [trip_type] END AS FLOAT) AS trip_type,\r\n    CAST(CASE WHEN [congestion_surcharge] = 'NaN' THEN NULL ELSE [congestion_surcharge] END AS FLOAT) AS congestion_surcharge\r\nFROM dbo.green_taxi_data_staged;"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Merge Green and Yellow trips data",
				"type": "SqlPoolStoredProcedure",
				"dependsOn": [
					{
						"activity": "Cleaning green trips",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Yellow Trips staging",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"sqlPool": {
					"referenceName": "NewYorkTaxiDB2",
					"type": "SqlPoolReference"
				},
				"typeProperties": {
					"storedProcedureName": "[dbo].[combine_green_and_yellow]"
				}
			}
		],
		"annotations": []
	}
}